package projet;

import java.util.ArrayList;
import java.util.HashMap;

import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

public class GreatPrinterMethodVisit extends MethodVisitor {

	private String appeller;
	private MessageMethod message;
	private ArrayList<AutoGeneratedLambdaMessage> lambda;
	private String source;
	private String current = "";
	
	private static int countLambda = 0;
	private static int index;

	boolean invokedRef = false; 
	
	GreatPrinterMethodVisit(String source, String appeller, MessageMethod method,
			ArrayList<AutoGeneratedLambdaMessage> lambda) {
		super(Opcodes.ASM7);
		this.appeller = appeller;
		this.message = method;
		this.lambda = lambda;
		this.source = source;
	}

	public void visitLocalVariable(final String name, final String descriptor, final String signature,
			final Label start, final Label end, final int index) {
		// if(name.equals("this") == true) return;
//		System.out.println("----------------START: visitLocalVariable-----------------]}}}}}}}}}}}}}}}}}}}}}}}");
//		System.out.println("name is " + name);
//		System.out.println("descriptor is " + descriptor);
//		System.out.println("signature is " + signature);
//		System.out.println("index is " + index);
//		System.out.println("----------------END: visitLocalVariable-----------------");
	}

	int position;
	public void visitLineNumber(final int line, final Label start) {
		if (appeller.substring(0, 7).equals("lambda$")) {
			lambda.get(index++).setLine(line);
			return;
		}
	}

	public void visitInvokeDynamicInsn(final String name, final String descriptor, final Handle bootstrapMethodHandle,
			final Object... bootstrapMethodArguments) {
		System.out.println(bootstrapMethodHandle.getOwner());
		System.out.println("handle desc" + bootstrapMethodHandle.getDesc());
		System.out.println("------------------INVOKE DINAMIC-------------------");
		System.out.println("name is " + name);
		System.out.println("descriptor is " + descriptor);
		for (int i = 0; i < bootstrapMethodArguments.length; i++)
			System.out.println(bootstrapMethodArguments[i]);
		System.out.println("handle is:");
		System.out.println("------------------END: INVOKE DINAMIC-------------------");

		countLambda++;
		lambda.add(new AutoGeneratedLambdaMessage());
		AutoGeneratedLambdaMessage lambdaMessage = lambda.get(countLambda - 1);

		////////////////////////// Descriptor of interface
		String interfaceSignatureComplete = bootstrapMethodArguments[1].toString();
		boolean findPar = false;
		String descriptorInterface = "";
		for (int i = 0; i < interfaceSignatureComplete.length(); i++) {
			if (interfaceSignatureComplete.charAt(i) == '(')
				findPar = true;
			if (findPar)
				descriptorInterface += Character.toString(interfaceSignatureComplete.charAt(i));
		}
		
		findPar = false;
		String completeDescriptorInterface = "";
		for (int i = descriptorInterface.length()-1; i>0 ; i--) {
			if (descriptorInterface.charAt(i) == '(') {
				findPar = true;
				i -= 2;
			}
			if (findPar) {
				String a = Character.toString(descriptorInterface.charAt(i));
				a += completeDescriptorInterface;
				completeDescriptorInterface = a;
			}
				//completeDescriptorInterface = Character.toString(descriptorInterface.charAt(i));
		}
		
		lambdaMessage.setDescriptor(completeDescriptorInterface);
		///////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////// Interface used
		boolean closed = false;
		String interfaceDescriptor = "";

		// Name of the interface used by invoke dynamic
		for (int i = 0; i < descriptor.length(); i++) {
			if (descriptor.charAt(i) == ')')
				closed = true;
			if (closed)
				interfaceDescriptor += Character.toString(descriptor.charAt(i));
		}
		interfaceDescriptor = interfaceDescriptor.substring(2, interfaceDescriptor.length() - 1);
		//////////////////////////////////////////////////////////////////////////////////////////////////
		lambdaMessage.setInterfaceName(interfaceDescriptor);
		lambdaMessage.setFatherMethod(appeller);
		lambdaMessage.setSource(source);
		lambdaMessage.setDescriptorInterface(bootstrapMethodArguments[2].toString());
	}
}
